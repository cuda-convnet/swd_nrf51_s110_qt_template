#ifndef __CUSTOM_SERVICE_H__
#define __CUSTOM_SERVICE_H__

#include <stdint.h>
#include <stdbool.h>
#include "ble.h"
#include "ble_srv_common.h"

#if defined(__cplusplus)
extern "C" {
#endif
//============================================================================//
// Custom UUID generated by python script:
// 40098DDB-CAF7-4C43-90BE-AE1A68B8E246
// 0x46,0xE2,0xB8,0x68,0x1A,0xAE,0xBE,0x90,0x43,0x4C,0xF7,0xCA,0xDB,0x8D,0x09,0x40
//
// The Nordic soft device supports using a custom UUID but only customizing the 
// 12th and 13th bytes, similar to how the Bluetooth SIG uses shorter UUIDs
//
#define GEN_FORM_UUID(MSB, LSB) 0xB7,0x48,0x30,0x2C,0x8A,0xDE,0xB4,0xB7,0x77,0x4B,0xBD,0x40,(LSB),(MSB),0x6F,0x7A

#define CUSTOM_BASE_UUID 0xB7,0x48,0x30,0x2C,0x8A,0xDE,0xB4,0xB7,0x77,0x4B,0xBD,0x40,0x00,0x00,0x6F,0x7A

#define CS_UUID_LSB_IDX 12
#define CS_UUID_MSB_IDX (CS_UUID_LSB_IDX+1)
//
// The Nordic SD allows you to define multiple vendor-specific UUIDs, each with
// its own type.
#define CS_UUID_TYPE (BLE_UUID_TYPE_VENDOR_BEGIN + 0)
// Custom Service UUID
// Use the base UUID for the Custom Service
#define CUSTOM_SERVICE_UUID 			0x0000
#define CS_CHAR_COMMAND_UUID			0x0001
#define CS_CHAR_STATUS_UUID             0x0002
//============================================================================//

#define CS_CMD_NUM 8

typedef void (*cs_cmd_t)(uint8_t*, uint8_t);
//============================================================================//
typedef enum
{
    BLE_CS_EVT_NOTIFICATION_ENABLED,
    BLE_CS_EVT_NOTIFICATION_DISABLED
} ble_cs_evt_type_t;

typedef struct
{
    ble_cs_evt_type_t evt_type;
} ble_cs_evt_t;

// Forward declaration of the ble_cs_t type.
typedef struct ble_cs_s ble_cs_t;

// Service event handler
typedef void (*ble_cs_evt_handler_t) (ble_cs_t * p_cs, ble_cs_evt_t * p_evt);

typedef struct
{
    ble_cs_evt_handler_t            evt_handler;
    ble_srv_cccd_security_mode_t    cs_command_attr_md;
    ble_srv_cccd_security_mode_t    cs_status_attr_md;
    ble_srv_security_mode_t         cs_bsl_attr_md;
} ble_cs_init_t;

struct ble_cs_s
{
    ble_cs_evt_handler_t            evt_handler;               // event handler
    uint16_t                        service_handle;            // handle for the service
    ble_gatts_char_handles_t        command_handles;
    ble_gatts_char_handles_t        status_handles;
    uint16_t                        conn_handle;
};

//============================================================================//
// @brief Custom Service Initialization
uint32_t CS_Init(ble_cs_t * p_cs);

void ble_cs_on_ble_evt(ble_cs_t * p_cs, ble_evt_t * p_ble_evt);

uint32_t CS_SendData(ble_cs_t * p_cs, uint8_t* buf, uint8_t len);
uint32_t CS_SendStatusUpdate(ble_cs_t * p_cs, uint8_t status);
void CS_SetCommand(cs_cmd_t cmd, uint8_t cmdNum);
#if defined(__cplusplus)
}
#endif
#endif // BLE_FLS_H__

/** @} */
